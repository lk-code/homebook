@using HomeBook.Frontend.Abstractions.Contracts
@using NavigationContext = Microsoft.AspNetCore.Components.Routing.NavigationContext

<Router AppAssembly="@typeof(App).Assembly"
        OnNavigateAsync="HandleNavigationAsync">

    <Found Context="routeData">

        <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)"/>

        <FocusOnNavigate RouteData="@routeData" Selector="h1"/>

    </Found>

    <NotFound>

        <PageTitle>Not found</PageTitle>

        <LayoutView Layout="@typeof(MainLayout)">
            <p role="alert">Sorry, there's nothing at this address.</p>
        </LayoutView>

    </NotFound>

</Router>

@code {

    [Inject]
    private NavigationManager NavigationManager { get; set; }

    [Inject]
    private ISetupService SetupService { get; set; }

    private bool _setupServiceInitialized = false;
    private bool _isRedirecting;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        // initialize the setup service in background
        _ = Task.Run(async () =>
        {
            await SetupService.InitializeAsync();
            _setupServiceInitialized = true;
            StateHasChanged();
        });
    }

    private async Task HandleNavigationAsync(NavigationContext context)
    {
        if (_isRedirecting)
        {
            _isRedirecting = false;
            return;
        }

        // wait until SetupService is initialized
        while (!_setupServiceInitialized)
        {
            await Task.Delay(50);
        }

        bool isSetupDone = await SetupService.IsSetupDoneAsync();
        bool isOnSetupPage = context.Path.StartsWith("setup", StringComparison.OrdinalIgnoreCase);

        if (isSetupDone)
        {
            _isRedirecting = true;
            NavigationManager.NavigateTo("/");
        }
        else if (!isSetupDone && !isOnSetupPage)
        {
            _isRedirecting = true;
            NavigationManager.NavigateTo("/setup");
        }
    }
}
