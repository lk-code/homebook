name: Build and Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  packages: write

env:
  DOCKER_IMAGE: "docker.io/lkcode/homebook"
  DOCKER_PLATFORMS: "linux/amd64,linux/arm64"
  VERSION: "1.0.${{ github.run_number }}"
  DOTNET_VERSION: "9.0.x"
  FRONTEND_APPSETTINGS_FILE: "./source/HomeBook.Frontend/wwwroot/appsettings.json"
  BACKEND_APPSETTINGS_FILE: "./source/HomeBook.Backend/appsettings.json"
  CLIENT_CSPROJ: "./source/HomeBook.Client/HomeBook.Client.csproj"
  CLIENT_OUTPUT_DIR: "./source/HomeBook.Client"

jobs:

  build-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Install SonarQube Cloud scanner
        run: |
          dotnet tool install --global dotnet-sonarscanner

      - name: Install Kiota CLI
        run: |
          dotnet tool install --global Microsoft.OpenApi.Kiota

      - name: Restore dependencies
        run: |
          dotnet restore

      - name: Build And Test
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: pwsh
        run: |
          dotnet-sonarscanner begin /k:"lk-code_homebook" /o:"lk-code-github" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
          dotnet build --configuration Release --no-restore
          dotnet test --configuration Release --no-restore
          dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image
        run: |
          docker build \
            --file ./Dockerfile \
            --build-arg FRONTEND_APPSETTINGS_FILE=${{ env.FRONTEND_APPSETTINGS_FILE }} \
            --build-arg BACKEND_APPSETTINGS_FILE=${{ env.BACKEND_APPSETTINGS_FILE }} \
            --tag test-image .

  post-build:
    runs-on: ubuntu-latest
    needs:
      - build-test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure Git User and Auth
        run: |
          git config user.name "GitHub Actions"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}

      - name: Set Version Git Tag
        run: |
          git tag ${{ env.VERSION }}

      - name: update Frontend appsettings.json
        run: |
          sed -i "s/\"Version\": \".*\"/\"Version\": \"$VERSION\"/" ${{ env.FRONTEND_APPSETTINGS_FILE }}
          git add ${{ env.FRONTEND_APPSETTINGS_FILE }}

      - name: cat Frontend appsettings.json
        run: |
          cat ${{ env.FRONTEND_APPSETTINGS_FILE }}

      - name: update Backend appsettings.json
        run: |
          sed -i "s/\"Version\": \".*\"/\"Version\": \"$VERSION\"/" ${{ env.BACKEND_APPSETTINGS_FILE }}
          git add ${{ env.BACKEND_APPSETTINGS_FILE }}

      - name: cat Backend appsettings.json
        run: |
          cat ${{ env.BACKEND_APPSETTINGS_FILE }}

      - name: Create and push deploy branch
        run: |
          git push origin ${{ env.VERSION }}
          git checkout -b deploy
          git commit -m "Release version ${{ env.VERSION }}"
          git push origin deploy --force

  client-deploy:
    runs-on: ubuntu-latest
    needs:
      - post-build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: deploy

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Build Solution
        run: |
          dotnet build --configuration Release --no-restore

      - name: Install Kiota CLI
        run: |
          dotnet tool install --global Microsoft.OpenApi.Kiota

      - name: Restore dependencies
        run: |
          dotnet restore

      - name: Build Client
        run: |
          dotnet build ${{ env.CLIENT_CSPROJ }} --configuration Release --no-restore -p:PackageVersion=${{ env.VERSION }}

      - name: Upload NuGet Artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          name: ${{ env.VERSION }}
          path: "**/*.${{ env.VERSION }}.nupkg"

      - name: Upload Client Artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          name: client-output
          path: ${{ env.CLIENT_OUTPUT_DIR }}

      - name: Publish
        run: |
          dotnet nuget push "**/*.${{ env.VERSION }}.nupkg" --no-symbols --skip-duplicate --api-key ${{ secrets.NUGET_API_KEY }} --source "nuget.org"

  docker-deploy:
    runs-on: ubuntu-latest
    needs:
      - post-build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: deploy

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3.4.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5.7.0
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: |
            type=raw,value=${{ env.VERSION }}
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v6.18.0
        with:
          context: ./
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: ${{ env.DOCKER_PLATFORMS }}
          build-args: |
            FRONTEND_APPSETTINGS_FILE=${{ env.FRONTEND_APPSETTINGS_FILE }}
            BACKEND_APPSETTINGS_FILE=${{ env.BACKEND_APPSETTINGS_FILE }}
